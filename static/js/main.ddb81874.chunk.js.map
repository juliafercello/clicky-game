{"version":3,"sources":["components/Card/index.js","components/Wrapper/index.js","components/Footer/index.js","components/Navbar/index.js","components/ScoreCard/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","name","src","image","id","onClick","handleClickEvent","Wrapper","children","Footer","Navbar","ScoreCard","message","score","App","state","cards","cardIndex","_this","findIndex","card","clicked","setState","resetGame","clickedCard","filter","length","shuffleCards","i","j","Math","floor","random","_ref","_this2","this","components_Wrapper","components_Navbar","components_ScoreCard","map","components_Card","key","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ddb81874.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Card(props) {\r\n  return (\r\n    <div className=\"card m-3 float-left\">\r\n        <img className=\"card-img-top\" alt={props.name} src={props.image} id={props.id} onClick={() => props.handleClickEvent(props.id)} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"container\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer className=\"navbar container footer bg-success\">\r\n      <span>Clicky Game</span>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React from \"react\";\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <nav className=\"navbar navbar-dark bg-success\">\r\n            <div className=\"container\">\r\n                <h1 className=\"display-4\">Grandma's Garden!!</h1>\r\n                <p className=\"lead\">Test your memory with this clicky game! Oh, and don't click the same flower twice... </p>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\n\r\nfunction ScoreCard(props) {\r\n    return (\r\n        <div className=\"card mt-2 mb-2 \">\r\n            <div className=\"card-header alert-success lead\">\r\n                <strong>{props.message}</strong>\r\n                <div className=\"float-right\">\r\n                    <strong>Score: </strong> {props.score}\r\n                </div>\r\n            </div>\r\n            <div className=\"card-body\">\r\n                {props.children}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ScoreCard;","import React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Footer from \"./components/Footer\";\nimport Navbar from \"./components/Navbar\";\nimport ScoreCard from \"./components/ScoreCard\";\nimport cards from \"./cards.json\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    cards,\n    score: 0,\n    message: \"Click a flower to get started\"\n  };\n\n  handleClickEvent = (id) => {\n    //find the index for the clicked card \n    const cardIndex = this.state.cards.findIndex(card => card.id === id);\n\n    // check to see if it has been clicked\n    if (!cards[cardIndex].clicked) {\n\n      //increase score\n      this.setState({ score: this.state.score + 1 });\n\n      //Update clicked to true \n      let clickedCard = this.state.cards[cardIndex];\n      clickedCard.clicked = true;\n      cards[cardIndex] = clickedCard;\n\n      this.setState({ cards: cards });\n\n      //check to see if the game is over\n      const gameOver = this.state.cards.filter(card => card.clicked === false);\n      if (gameOver.length > 0) {\n        this.shuffleCards();\n        this.setState({ message: \"Great guess!\" });\n      }\n      else {\n        //winner winner \n        this.setState({ message: \"You won!!\" });\n        this.resetGame();\n      }\n    }\n    //already clicked. Game Over. \n    else {\n      this.setState({ message: \"Oops, try again!\" });\n      this.resetGame();\n    }\n  }\n\n  shuffleCards = () => {\n    for (let i = cards.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [cards[i], cards[j]] = [cards[j], cards[i]];\n    }\n  }\n\n  resetGame = () => {\n    //set score to zero\n    this.setState({ score: 0 });\n\n    //set clicked to false for each card\n    for (let i = 0; i < cards.length; i++) {\n      cards[i].clicked = false\n    }\n    this.setState({ cards: cards });\n\n    //move the cards\n    this.shuffleCards();\n  }\n\n  render() {\n    return (\n      <div>\n        <Wrapper>\n          <Navbar\n            message={this.state.message}\n            score={this.state.score}\n          />\n          <ScoreCard\n            message={this.state.message}\n            score={this.state.score}\n          >\n            {this.state.cards.map(card => (\n              <Card\n                key={card.id}\n                id={card.id}\n                image={card.image}\n                name={card.name}\n                handleClickEvent={this.handleClickEvent}\n              />\n            ))}\n          </ScoreCard>\n        </Wrapper>\n        <Footer />\n      </div>\n\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}